# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  # - deploy_test
  - deploy


variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

# Official docker compose image.
# image: docker:19-git
image:
  # image: docker:18-git
  # name: docker/compose:latest # вроде работало
  # name: alpine:latest
  # name: docker:latest
  # name: docker:stable
  # name: docker:24.0.5
  name: docker:git # прошлый
  # name: docker:dind


services:
  - docker:dind

before_script:
  - echo "Before script"
  # - docker info
  # - apt-get update -y -qq
  # - apt-get update -y

  # - echo "http://ftp.halifax.rwth-aachen.de/alpine/v3.16/main" >> /etc/apk/repositories
  # - echo "http://ftp.halifax.rwth-aachen.de/alpine/v3.16/community" >> /etc/apk/repositories
  - apk update
  # - apk add --update --no-cache curl jq py3-configobj py3-pip py3-setuptools python3 python3-dev docker docker-compose docker-cli-compose
  - apk add --update --no-cache curl jq py3-configobj py3-pip py3-setuptools python3 python3-dev docker docker-compose
  - DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
  - mkdir -p $DOCKER_CONFIG/cli-plugins
  - curl -SL https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
  - chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
  # - chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
  # - apt-get -yq update
  # - curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose

  # - apk add --update --no-cache curl py3-pip py3-setuptools python3 python3-dev docker docker-compose
  # - apk add --update --no-cache python3 py-pip py-pip build-base
  #  python-dev
  # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  # - apt-get install -y --no-install-recommends build-essential ssh gcc git virtualenv docker openssh-client py-pip virtualenv docker-compose docker-compose-plugin
  # - apt-get install -y --no-install-recommends build-essential ssh gcc git virtualenv docker openssh-client py-pip virtualenv docker-compose
  # - pip install -y --no-install-recommends build-essential gcc git ssh libgeos-dev virtualenv

  # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # - apt-get install -y --no-install-recommends build-essential gcc git ssh libgeos-dev virtualenv

  # - mkdir -p ~/.ssh
  # - eval $(ssh-agent -s)
  # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  - docker version
  - docker compose version

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - docker compose build
    - echo "Compile complete."


lint-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - docker compose run -d --name bot_web_admin -e DATABASE_URI=postgresql://postgres:postgres@postgres:5432/vpn_bot web
    - docker exec bot_web_admin bash -c "/opt/venv/bin/python -m black --check ."
    - docker exec bot_web_admin bash -c "/opt/venv/bin/python -m isort --check-only --diff ."
    - docker compose stop
    - echo "No lint issues found."


test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - - docker compose run -d --name bot_web_admin -e DATABASE_URI=postgresql://postgres:postgres@postgres:5432/vpn_bot web
    - docker exec bot_web_admin bash -c "/opt/venv/bin/python -m pytest"
    - docker compose stop
    - echo "Code coverage is 90%"


deploy-job:
  # image: alpine:latest
  stage: deploy
  tags:
    - do_it
  script:
    - echo "Deploying application..."
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /projects/vpn_bot && bash /projects/vpn_bot/deploy.sh"
    - echo "Application successfully deployed."

#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name my-app $TAG_COMMIT"

