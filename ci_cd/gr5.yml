#  в этот момент все могло бы работать с раннером docker

stages:
  - build
  - lint
  - test
  - deploy
  - deploy_test


# variables:
#   DOCKER_HOST: tcp://docker:2375/
#   DOCKER_DRIVER: overlay2
#   DOCKER_TLS_CERTDIR: ""
# services:
#   - docker:dind

# services:
  # - name: docker:dind
    # entrypoint: ["env", "-u", "DOCKER_HOST"]
    # command: ["dockerd-entrypoint.sh"]
# variables:
#   DOCKER_HOST: tcp://docker:2375/
#   DOCKER_DRIVER: overlay2
#   # See https://github.com/docker-library/docker/pull/166
#   DOCKER_TLS_CERTDIR: ""


# variables:
#   DOCKER_HOST: tcp://docker:2375/
#   DOCKER_DRIVER: overlay2

# Official docker compose image.
# image: docker:19-git
# image:
  # image: docker:18-git
  # name: docker/compose:latest # вроде работало
  # name: alpine:latest
  # name: docker:latest
  # name: docker:stable
  # name: docker:24.0.5
  # name: docker:git # прошлый
  # name: docker:20.10.11-dind
  # name: docker:dind

before_script:
  - echo "Before script"
  - apk update
  # - apk add --update --no-cache curl jq py3-configobj py3-pip py3-setuptools python3 python3-dev docker docker-compose
  # - apk add --update curl jq py3-configobj py3-pip py3-setuptools python3 python3-dev docker docker-compose
  # - apt-get update -qy
  # - sudo dpkg --configure -a
  # - apt-get install -y --no-install-recommends build-essential gcc git ssh libgeos-dev virtualenv py3-pip py3-setuptools python3 python3-dev docker docker-compose
  # - apt-get install -y --no-install-recommends openssh-client curl git ssh python3 py3-pip py3-setuptools virtualenv python3 docker docker-compose
  # - apt-get install -y --no-install-recommends python3 docker docker-compose
  - apk update
  - apk add --update --no-cache ca-certificates curl git openssh gnupg python3 docker docker-compose

  - DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
  - mkdir -p $DOCKER_CONFIG/cli-plugins
  - curl -SL https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
  - chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
  - docker version
  - docker compose version

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    # - docker compose build --parallel
    - echo "Compile complete."


lint-job:   # This job also runs in the test stage.
  # stage: test    # It can run at the same time as unit-test-job (in parallel).
  stage: lint    # It can run at the same time as unit-test-job (in parallel).

  script:
    - echo "Linting code... This will take about 10 seconds."
    - docker rm bot_web_admin_test
    - docker compose run -d --name bot_web_admin_test -e DATABASE_URI=postgresql://postgres:postgres@postgres:5432/vpn_bot web
docker compose run --name bot_web_admin_test -e DATABASE_URI=postgresql://postgres:postgres@postgres:5432/vpn_bot web
docker exec bot_web_admin_test bash -c "/opt/venv/bin/python -m pytest"
docker exec bot_web_admin_test bash -c "/opt/venv/bin/python -m black --check ."
docker exec bot_web_admin_test bash -c "/opt/venv/bin/python -m isort --check-only --diff ."

    - docker exec bot_web_admin_test bash -c "/opt/venv/bin/python -m black --check ."
    - docker exec bot_web_admin_test bash -c "/opt/venv/bin/python -m isort --check-only --diff ."
    - docker compose stop bot_web_admin_test
    - echo "No lint issues found."


test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - docker compose run -d --name bot_web_admin -e DATABASE_URI=postgresql://postgres:postgres@postgres:5432/vpn_bot web
    - docker exec bot_web_admin bash -c "/opt/venv/bin/python -m pytest"
    - docker compose stop
    - echo "Code coverage is 90%"


deploy-job:
  # image: alpine:latest
  stage: deploy
  tags:
    - do_it
  script:
    - echo "Deploying application..."
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /projects/vpn_bot && bash /projects/vpn_bot/deploy.sh"
    - echo "Application successfully deployed."

deploy-test-job:
  # image: alpine:latest
  stage: deploy_test
  tags:
    - do_it
  script:
    - echo "Deploying application..."
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd /projects/vpn_bot && docker exec bot_web_admin bash -c '/opt/venv/bin/python -m pytest'"
    - echo "Application successfully deployed."


#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
#     # - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name my-app $TAG_COMMIT"
